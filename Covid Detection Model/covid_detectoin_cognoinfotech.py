# -*- coding: utf-8 -*-
"""Covid_Detectoin_CognoInfoTech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wBh-v1Tmq44y_rakf4MS6zgtZZgZ8Ecv

**Covid Detection - This is the second project in CognoInfo Tech Internship**
"""

# Hello, this is my second project in CognoInfo Tech Internship,
# here i tried to develop a model to detedt the X-RAYs images to classify it
# one from three categories (Covid, Pneumonia, Normal),
# I used the DL in this after i converted the images from BGR to RGB fromat,
# because it sutiable and good dealed with CNN

# This section imports various modules needed for file handling, downloading, and unzipping.
import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'covid19-radiography-database:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F576013%2F3324348%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240929%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240929T075311Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D5f164701f3c194146264a14098b47fac1daf56dc6a16d9749a99a3b506803dcc896cac1dd21a168a13222923a65e1f005318cef2897963027f8ade01c72006e147d46756d4ac740ab04be7aa17240d29793fceb0c3834020ba302f9cc262152bc4fdca978b726c6a319e26b36fcfdd2a1b4dc9330441a6bdc03a4b9ecde1427bf3914d04ec6150c9bb030bbaf4d17bee12fa60bd189b13da0322d30d591f68c0614bb46b7b5a1b0337489b1b266de76459efbbd278e3e389e61d8457adaef285828b4a936eab2f7b264a7bbec8d7d641f23dd090b7793b068b042c3fd74ae089b356f956cab4164470968962f717be28999977a5500f9e8060d2ed3d170fc62e'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# Import the essential libraries.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import seaborn as sns
#deep learning
import tensorflow as tf
from tensorflow import keras
from keras.layers import Dropout, Activation , BatchNormalization , Flatten , Dense , Conv2D , MaxPool2D

from keras.utils import to_categorical

#machine learn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report , confusion_matrix

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Goal: The main purpose of the cell is to create a list called imagepath.
# This list will store the paths to all the PNG images related to COVID-19 detection within your dataset.
from tqdm import tqdm
import os
imagepath = []
for dirname, _, filenames in os.walk('/kaggle/input'):
    if 'image' in dirname:
        for filename in filenames:
            if filename.endswith('png'):
                imagepath.append(os.path.join(dirname, filename))

import cv2
data = []
target = []
resize = 150

cat = {'Viral Pneumonia': 'pneumonia' , 'Normal': 'normal' , 'COVID':'covid'}

for imagepat in tqdm(imagepath):
    label = imagepat.split(os.path.sep)[-3]
    if label not in cat:
        continue
    image = cv2.imread(imagepat)
    image = cv2.cvtColor(image , cv2.COLOR_BGR2RGB)
    image = cv2.resize(image , (resize,resize))/255.0
    data.append(image)
    target.append(cat[label])


print(f"processed {len(data)} images")

# Calculate the number of the links
print(f" The number of the links is: {len(imagepath)}")

# # Calculate the number of the data and target links
print(len(data))
print(len(target))

# Show some of links for the images
print(imagepath[:5])

# Showing some samples of the links, here you can see them well
print(imagepath[1])
print(imagepath[2])
print(imagepath[3])
print(imagepath[4])
print(imagepath[5])

# Show the content of one image
import matplotlib.image as mpimg

# Sample image path (using the first image for this example)
image_path = '/kaggle/input/covid19-radiography-database/COVID-19_Radiography_Dataset/COVID/images/COVID-887.png'

# Read and display the image
img = mpimg.imread(image_path)
plt.imshow(img)
plt.show()

# Import the label Encoder
# This function is used to convert the images to numerical
# For example, giving binary digit for each one
# For example, [0,0,0] equels 0 it's for first category  ->> 'covid' is encoded as 0
# For example, [0,0,1] equels 1 it's for second category ->> 'normal' is encoded as 1
# For example, [0,1,0] equels 2 it's for third category ->> 'pneumonia' is encoded as 2

le = LabelEncoder()
label= le.fit_transform(target)
label = to_categorical(label)

print(le.classes_)
print(label[0])

# First split into training and testing sets
(x_train, x_test, y_train, y_test) = train_test_split(data, label, test_size=0.20, stratify=label, random_state=42)

# Second split into training and validation sets
(x_train, x_val, y_train, y_val) = train_test_split(x_train, y_train, test_size=0.20, stratify=y_train, random_state=42)

trainX = np.array(x_train)
trainY = np.array(y_train)
testX = np.array(x_test)
testY = np.array(y_test)
valX = np.array(x_val)
valY = np.array(y_val)


print(trainX.shape)
print(testX.shape)
print(trainY.shape)
print(testY.shape)
print(valX.shape)
print(valY.shape)

# Apply the DL part

model = keras.Sequential()
#cnn layers
#first layer
model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(150, 150, 3), kernel_initializer='he_normal'))
model.add(MaxPool2D(pool_size=(2, 2)))

#second layer
model.add(Conv2D(filters=64 , kernel_size = (3,3) , activation = 'relu')),
model.add(MaxPool2D(pool_size=(2,2))),
#third layer
model.add(Conv2D(filters=128 , kernel_size = (3,3) , activation = 'relu')),
model.add(MaxPool2D(pool_size=(2,2) , strides=(1,1))),


#ann layers
#first layer
model.add(Flatten()),
model.add(Dense(64 ,activation='relu')),
model.add(Dropout(0.2)),
model.add(Dense(3 , activation = 'softmax'))

# Show the summary of the data
model.summary()

# Purpose: To configure the model for training by specifying the optimizer,
# loss function, and performance metric. This setup enables the model to learn
# effectively from the data during the training process.
model.compile(
    optimizer='adam',
    loss=tf.keras.losses.categorical_crossentropy,
    metrics=['accuracy']
)

# Train the model using 20 epochs
model.fit(trainX ,trainY , epochs = 20 , batch_size = 40 , verbose=1 , validation_data =(valX , valY) ,)

# Making a Predection and Evaluating Model Performance
prediction= model.predict(testX)
y_pred= np.argmax(prediction  , axis=1)

y_test = np.argmax(prediction , axis=1)
cm = confusion_matrix(y_pred , y_test)

print(cm)

class_name = le.classes_

confusion_matrix = pd.DataFrame(cm , index = class_name , columns= class_name)
plt.figure(figsize = (8,6))
sns.heatmap(confusion_matrix , annot=True , cbar=False ,fmt='d' ,cmap='Blues')
plt.title('confusion_matrix ')
plt.xlabel('Prediction')
plt.ylabel('True')
plt.show()

print(classification_report(y_test , y_pred , target_names=class_name , digits=5))

model.save('covid-detection-model.h5')

import pickle
pickle.dump(le, open('lebel_encoder.pkl','wb'))
print('save')

"""**REAL-TIME-DETECTION**"""

from tensorflow.keras.models import load_model
load_models = load_model('covid-detection-model.h5')
load_le = pickle.load(open('lebel_encoder.pkl' ,'rb'))

def prediction_system(image_path , load_models ,le , image_size = 150):
    #load_image
    load_image = cv2.imread(image_path)
    if load_image is None:
        raise ValueError(f"something wrong {image_path} in this path")
    #preprocessing
    image = cv2.cvtColor(load_image, cv2.COLOR_BGR2RGB)
    image_resize = cv2.resize(image ,(image_size,image_size))
    image_scaled = image_resize/255.0
    image_input = np.expand_dims(image_scaled,axis=0)
    prediction = model.predict(image_input)
    prediction_label = np.argmax(prediction)
    confidance_score = prediction[0][prediction_label]

    label = le.inverse_transform([prediction_label])[0]

    #for image
    plt.imshow(image_resize)
    plt.title(f"predicted {label} , confidance level : {confidance_score*100:.2f}%")
    plt.ylabel('off')
    plt.show()

    return label , confidance_score

image_path='/kaggle/input/covid19-radiography-database/COVID-19_Radiography_Dataset/COVID/images/COVID-100.png'
prediction_label , confidance_score = prediction_system(image_path , load_model ,load_le)

import time

# Loop through every 3rd image from the first 300 images
for i in range(0, min(300, len(imagepath)), 3):
    image_path = imagepath[i]  # Get every 3rd image path from the list
    try:
        prediction_label, confidence_score = prediction_system(image_path, load_models, load_le)
        print(f"Image: {image_path}")
        print(f"Predicted Class: {prediction_label}, Confidence: {confidence_score * 100:.2f}%\n")
        time.sleep(2)  # Add a 2-second delay after displaying each image
    except ValueError as e:
        print(e)

